generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  password           String?
  firstName          String?
  lastName           String?
  role               UserRole            @default(TENANT)
  phone              String?
  firebaseUid        String?             @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  budgetMax          Int?
  budgetMin          Int?
  petPreferences     Json?
  preferredBedrooms  Int?
  preferredLocations String[]            @default([])
  profilePreferences Json?
  profileUpdatedAt   DateTime?
  applications       Application[]       @relation("ApplicantApplications")
  leases             Lease[]             @relation("TenantLeases")
  maintenanceTickets MaintenanceTicket[] @relation("TenantTickets")
  payments           Payment[]           @relation("TenantPayments")
  properties         Property[]          @relation("LandlordProperties")

  @@index([email])
  @@index([firebaseUid])
  @@index([role])
  @@map("users")
}

model Property {
  id                 String              @id @default(cuid())
  title              String?
  description        String?
  bedrooms           Int?
  bathrooms          Int?
  squareFeet         Int?
  rentAmount         Float?
  rentCurrency       String              @default("USD")
  deposit            Float               @default(0)
  addressStreet      String?
  addressCity        String?
  addressState       String?
  addressZip         String?
  addressCountry     String              @default("US")
  propertyType       PropertyType        @default(APARTMENT)
  status             PropertyStatus      @default(ACTIVE)
  isAvailable        Boolean             @default(true)
  availableFrom      DateTime?
  availableTo        DateTime?
  amenities          Json?
  images             Json?
  petPolicy          String?
  utilities          Json?
  latitude           Float?
  longitude          Float?
  landlordId         String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  applications       Application[]       @relation("PropertyApplications")
  leases             Lease[]             @relation("PropertyLeases")
  maintenanceTickets MaintenanceTicket[] @relation("PropertyTickets")
  landlord           User                @relation("LandlordProperties", fields: [landlordId], references: [id])

  @@index([landlordId])
  @@index([status])
  @@index([isAvailable])
  @@index([propertyType])
  @@map("properties")
}

model Lease {
  id              String      @id @default(cuid())
  startDate       DateTime
  endDate         DateTime
  monthlyRent     Float
  securityDeposit Float?
  status          LeaseStatus @default(ACTIVE)
  terms           String?
  notes           String?
  propertyId      String
  tenantId        String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  property        Property    @relation("PropertyLeases", fields: [propertyId], references: [id])
  tenant          User        @relation("TenantLeases", fields: [tenantId], references: [id])
  payments        Payment[]   @relation("LeasePayments")

  @@index([propertyId])
  @@index([tenantId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@map("leases")
}

model Payment {
  id          String        @id @default(cuid())
  amount      Float
  dueDate     DateTime
  paidDate    DateTime?
  status      PaymentStatus @default(PENDING)
  type        PaymentType   @default(RENT)
  description String?
  late        Boolean       @default(false)
  lateFee     Float?
  leaseId     String?
  tenantId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  lease       Lease?        @relation("LeasePayments", fields: [leaseId], references: [id])
  tenant      User          @relation("TenantPayments", fields: [tenantId], references: [id])

  @@index([leaseId])
  @@index([tenantId])
  @@index([status])
  @@index([dueDate])
  @@index([type])
  @@map("payments")
}

model MaintenanceTicket {
  id            String       @id @default(cuid())
  title         String
  description   String
  priority      Priority     @default(MEDIUM)
  status        TicketStatus @default(OPEN)
  category      String?
  estimatedCost Float?
  actualCost    Float?
  assignedTo    String?
  completedAt   DateTime?
  propertyId    String
  tenantId      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  property      Property     @relation("PropertyTickets", fields: [propertyId], references: [id])
  tenant        User         @relation("TenantTickets", fields: [tenantId], references: [id])

  @@index([propertyId])
  @@index([tenantId])
  @@index([status])
  @@index([priority])
  @@index([assignedTo])
  @@map("maintenance_tickets")
}

model Application {
  id                  String            @id @default(cuid())
  propertyId          String
  applicantId         String?
  firstName           String
  lastName            String
  email               String
  phone               String
  dateOfBirth         DateTime
  currentAddress      String
  currentCity         String
  currentState        String
  currentZip          String
  yearsAtAddress      Float
  reasonForMoving     String?
  employerName        String
  jobTitle            String
  employerAddress     String
  employerPhone       String
  employmentLength    String
  monthlyIncome       Float
  otherIncome         Float?
  prevAddress         String?
  prevLandlordName    String?
  prevLandlordContact String?
  reasonForLeaving    String?
  wasLateRent         Boolean           @default(false)
  refName             String
  refRelationship     String
  refContact          String
  occupants           Int
  pets                Json?
  vehicles            Json?
  wasEvicted          Boolean           @default(false)
  felony              Boolean           @default(false)
  desiredMoveIn       DateTime
  consentBackground   Boolean           @default(false)
  signature           String
  signedAt            DateTime
  status              ApplicationStatus @default(PENDING)
  submittedAt         DateTime          @default(now())
  reviewedAt          DateTime?
  reviewNotes         String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  applicant           User?             @relation("ApplicantApplications", fields: [applicantId], references: [id])
  property            Property          @relation("PropertyApplications", fields: [propertyId], references: [id])

  @@index([propertyId])
  @@index([applicantId])
  @@index([status])
  @@index([submittedAt])
  @@index([email])
  @@map("applications")
}

enum UserRole {
  ADMIN
  LANDLORD
  TENANT
  PROPERTY_MANAGER
}

enum PropertyType {
  APARTMENT
  HOUSE
  CONDO
  TOWNHOUSE
  STUDIO
  DUPLEX
  OTHER
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  OCCUPIED
  PENDING
}

enum LeaseStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  PENDING
  RENEWED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  FAILED
  CANCELLED
}

enum PaymentType {
  RENT
  SECURITY_DEPOSIT
  LATE_FEE
  MAINTENANCE
  UTILITIES
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  DECLINED
  WITHDRAWN
}
